# Entity
type TypeName {
  id: Int!
}

type Event {
  id: Int
  userId: Int
  title: String
  details: String
  venue: String
  date: String
  time: String
  admins: [Admin]
  participants: [Participant] # Maybe this is not needed while fetching all the events
}

type Admin {
  id: Int
  userId: Int
  eventId: Int
  username: String
  contactInfo: String
}

type Participant {
  id: Int
  userId: Int
  eventId: Int
}

extend type Query {
  events: [Event]
  event(id: Int!): Event
  participants(id: Int!): [Participant]
}

extend type Mutation {
  addEvent(input: AddEventInput!): Boolean
  editEvent(input: EditEventInput!): Boolean
  addParticipant(input: ParticipantInput): Boolean
}

extend type Subscription {
  subscriptionName: TypeName
}

input AddEventInput {
  id: Int
  userId: Int!
  title: String!
  details: String!
  venue: String!
  date: String!
  time: String!
  admins: [AdminInput]
}

input EditEventInput {
  id: Int!
  userId: Int!
  title: String!
  details: String!
  venue: String!
  date: String!
  time: String!
  admins: [AdminInput]
}

input AdminInput {
  # id: Int
  userId: Int
  eventId: Int
  username: String!
  contactInfo: String!
}

input ParticipantInput {
  eventId: Int!
  userId: Int!
}
