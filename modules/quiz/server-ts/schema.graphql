# Entity
type Quiz {
  id: Int!
  userId: Int
  active: Boolean
  title: String
  state: String
  cover:String
  description: String
  createdAt: String
  updatedAt: String
  user: User
  isEditableByUser: Boolean
  sections: [Section]
  attempts: [Attempt]
}

type Section {
  id: Int
  title: String
  quizId: Int!
  description: String
  createdAt: String
  updatedAt: String
  isActive: Boolean
  questions: [Question]
}

type Question {
  id: Int!
  sectionId: Int!
  answers: [Answer]
  description: String
  choiceType: String
  dependentQuestionId: Int
  dependentChoiceId: Int
  isActive: Boolean
  choices: [Choice]
  countries: [CountryItem]
  createdAt: String
  updatedAt: String
}

type CountryItem {
  id: Int!
  description: String!
  count: Int
}

type Choice {
  id: Int!
  questionId: Int!
  count: Int
  description: String!
  createdAt: String
  updatedAt: String
}

type Attempt {
  id: Int!
  userId: Int
  quizId: Int
  user:User
  answers: [Answer]
}

type Answer {
  id: Int!
  attemptId: Int
  questionId: Int
  choiceId: Int
  content: String
  createdAt: String
  updatedAt: String
}

type AttendeesOutput {
  attempts: [Attempt]
}

type UserWiseResult {
  id: Int!
  userId: Int!
  sections: [Section]
  attempts:[Attempt]
}

extend type Query {
  #get quizzes
  quizzes(filter: FilterQuizInput): [Quiz]
  #get quiz by id
  quiz(id: Int!): Quiz
  #get quiz attempt of a user
  quizWithAnswers(id: Int!, userId: Int!): Quiz
  #add quiz query
  addQuizQuery(userId: Int!): Quiz
  #get attendees
  getAttendees(id: Int!): AttendeesOutput
  #get quiz with answer count
  getQuizCount(id: Int!): Quiz
  #get user wise result
  getUserWiseResult(id: Int!, groupId: Int): UserWiseResult
}

input FilterQuizInput {
  searchText: String
  # model: String
  # status: String
}

extend type Mutation {
  # Create new quiz
  addQuiz(input: AddQuizInput!): Quiz
  # Add section in existing quiz
  addSection(quizId: Int!): Section
  # Add section in existing quiz
  submitQuestion(input: QuestionInput): Question
  # Add section in existing quiz
  submitSection(input: SectionInput): Section
  # Delete section
  deleteSection(id: Int): Section
  # Delete quiz
  deleteQuestion(id: Int): Question
  # Edit a quiz
  editQuiz(input: EditQuizInput!): Quiz
  # Delete quiz
  deleteQuiz(id: Int): Quiz
  # Add answers
  # addAnswers(input: AnswersInput!): Boolean
  # Add Attempt
  addAttempt(input: AddAttemptInput!): Attempt
  # Edit Attempt
  # editAttempt(input: EditAttemptInput!): Attempt
  # Duplicate quiz
  duplicateQuiz(userId: Int!, quizId: Int!): Quiz
}

input AddAttemptInput {
  id:Int
  userId: Int!
  quizId: Int!
  answers: [AnswerInput]
}

input AnswerInput {
  id: Int
  questionId: Int!
  choiceId: Int
  content: String
}

# input AnswersInput {
#   results: [AnswerInput]!
# }



input EditQuizInput {
  id: Int!
  userId: Int!
  active: Boolean
  title: String
  description: String
  cover:String
  isEditableByUser: Boolean
  sections: [EditSectionInput]
}

input EditSectionInput {
  id: Int
  quizId: Int
  title: String!
  description: String
  isActive: Boolean
  questions: [EditQuestionInput]
}

input EditQuestionInput {
  id: Int
  sectionId: Int
  description: String!
  choiceType: String
  dependentQuestionId: Int
  dependentChoiceId: Int
  isActive: Boolean
  choices: [EditChoiceInput]
}

input EditChoiceInput {
  id: Int
  questionId: Int
  description: String!
}

input AddQuizInput {
  id: Int
  userId: Int
  active: Boolean
  title: String
  description: String
    cover:String
  isEditableByUser: Boolean
  sections: [SectionInput]
}

input SectionInput {
  id: Int
  title: String
  quizId: Int
  description: String
  isActive: Boolean
  questions: [QuestionInput]
}

input QuestionInput {
  id: Int
  description: String
  sectionId: Int
  choiceType: String
  dependentQuestionId: Int
  dependentChoiceId: Int
  isActive: Boolean
  choices: [ChoiceInput]
}

input ChoiceInput {
  id: Int
  description: String
}

extend type Subscription {
  # modelUpdated: UpdateModelPayload
  quizzesUpdated(filter: FilterQuizInput): UpdateQuizzesPayload
  quizUpdated(id: Int): UpdateQuizPayload
  quizWithAnswersUpdated(id: Int): UpdateQuizPayload
}

type UpdateQuizzesPayload {
  mutation: String!
  node: Quiz
}

type UpdateQuizPayload {
  mutation: String!
  id: Int
  node: Quiz
}
