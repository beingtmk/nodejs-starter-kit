# Entity
type Quiz {
  id: Int!
  userId: Int
  active: Boolean
  title: String
  description: String
  createdAt: String
  updatedAt: String
  user: User
  isEditableByUser: Boolean
  questions: [Question]
}

type Question {
  id: Int!
  quizId: Int!
  description: String!
  choiceType: String
  isActive: Boolean
  choices: [Choice]
  createdAt: String
  updatedAt: String
}

type Choice {
  id: Int!
  questionId: Int!
  description: String!
  createdAt: String
  updatedAt: String
}

type Answer {
  id: Int!
  questionId: Int!
  userId: Int!
  choiceId: Int
  content: String
  createdAt: String
  updatedAt: String
}

extend type Query {
  #get quizzes
  quizzes(filter: String): [Quiz]
  #get quiz by id
  quiz(id: Int!): Quiz
  quizWithCreatedChoice(id: Int!, userId: Int!): Quiz
  #get answer
  answer(input: AnswerInput!): Answer
  answers(userId: Int!, quizId: Int!): AnswersOutput
  getAttendees(id: Int!): AttendeesOutput
  getQuizCount(id: Int!): QuizWithCount
  getUserWiseResult(id: Int!): UserWiseResult
}

type UserWiseResult {
  id: Int!
  userId: Int!
  attendees: AttendeesOutput
  questions: [QuestionWithResult]
}

type QuestionWithResult {
  id: Int!
  quizId: Int!
  description: String!
  choiceType: String
  isActive: Boolean
  choices: [Choice]
  answers: [Answer]
  createdAt: String
  updatedAt: String
}

type QuizWithCount {
  id: Int!
  userId: Int
  active: Boolean
  title: String
  description: String
  createdAt: String
  updatedAt: String
  user: User
  questions: [QuestionWithCount]
}

type QuestionWithCount {
  id: Int!
  quizId: Int!
  description: String!
  choiceType: String
  isActive: Boolean
  choices: [ChoiceWithCount]
  createdAt: String
  updatedAt: String
}

type ChoiceWithCount {
  id: Int!
  questionId: Int!
  description: String!
  count: Int

  createdAt: String
  updatedAt: String
}

type AttendeesOutput {
  users: [User]
}

type AnswersOutput {
  answers: [Answer]
}

extend type Mutation {
  # Create new quiz
  addQuiz(input: AddQuizInput!): Quiz
  # Edit a quiz
  editQuiz(input: EditQuizInput!): Quiz
  # Delete quiz
  deleteQuiz(id: Int): Quiz
  # Add answer
  addAnswer(input: AnswerInput!): Answer
  addAnswers(input: AnswersInput!): Boolean
}

input AnswersInput {
  results: [AnswerInput]!
}

input AnswerInput {
  id: Int
  questionId: Int!
  userId: Int!
  choiceId: Int
  content: String
}

input QuestionInput {
  id: Int
  quizId: Int
  description: String!
  choiceType: String
  isActive: Boolean
  choices: [ChoiceInput]
}

input ChoiceInput {
  id: Int
  questionId: Int

  description: String
}

input AddQuizInput {
  userId: Int!
  active: Boolean!
  title: String!
  isEditableByUser: Boolean

  description: String!
  questions: [QuestionInput]
}

input EditQuizInput {
  id: Int!
  userId: Int!
  active: Boolean!
  isEditableByUser: Boolean
  title: String!
  description: String!
  questions: [QuestionInput]
}

# extend type Subscription {
#   subscriptionName: TypeName
# }
