# Entity
type Quiz {
  id: Int!
  userId: Int
  active: Boolean
  title: String
  description: String
  createdAt: String
  updatedAt: String
  user: User
  isEditableByUser: Boolean
  sections:[Section]
}

type Section {
  id: Int
  title: String
  quizId: Int!
  description: String
  createdAt: String
  updatedAt: String
  isActive: Boolean
  questions: [Question]

}

type Question {
  id: Int!
  sectionId: Int!
  answers: [Answer]
  description: String!
  choiceType: String
  choiceDependenceDescription: String
  isActive: Boolean
  choices: [Choice]
  createdAt: String
  updatedAt: String
}

type Choice {
  id: Int!
  questionId: Int!
  count: Int
  description: String!
  createdAt: String
  updatedAt: String
}


type Answer {
  id: Int!
  questionId: Int!
  userId: Int
  choiceId: Int
  content: String
  createdAt: String
  updatedAt: String
}

type AttendeesOutput {
  users: [User]
}

type UserWiseResult {
  id: Int!
  userId: Int!
  attendees: AttendeesOutput
  sections: [Section]
}

extend type Query {
  #get quizzes
  quizzes(filter: FilterQuizInput): [Quiz]
  #get quiz by id
  quiz(id: Int!): Quiz
  #get quiz attempt of a user
  quizWithAnswers(id: Int!, userId: Int!): Quiz
  #get attendees
  getAttendees(id: Int!): AttendeesOutput
  #get quiz with answer count
  getQuizCount(id: Int!): Quiz
  #get user wise result
  getUserWiseResult(id: Int!, groupId: Int): UserWiseResult
}

input FilterQuizInput {
  searchText: String
  # model: String
  # status: String
}

extend type Mutation {
   # Create new quiz
  addQuiz(input: AddQuizInput!): Quiz
   # Edit a quiz
  editQuiz(input: EditQuizInput!): Quiz
   # Delete quiz
  deleteQuiz(id: Int): Quiz
   # Add answers
  addAnswers(input: AnswersInput!): Boolean
  # # Duplicate quiz
  # duplicateQuiz(userId: Int!, quizId: Int!): Quiz
}

input AnswersInput {
  results: [AnswerInput]!
}

input AnswerInput {
  id: Int
  questionId: Int!
  userId: Int!
  choiceId: Int
  content: String
}

input EditQuizInput {
  id: Int!
  userId: Int!
  active: Boolean
  title: String
  description: String

  isEditableByUser: Boolean
  sections:[EditSectionInput]
}

input EditSectionInput {
  id:Int
  quizid: Int
  title: String!
  description: String
  isActive: Boolean
  questions: [EditQuestionInput]
}

input EditQuestionInput {
  id:Int
  sectionId: Int
  description: String!
  choiceType: String
  choiceDependenceDescription: String
  isActive: Boolean
  choices: [EditChoiceInput]
}

input EditChoiceInput {
  id:Int
  questionId: Int
  description: String!
}




input AddQuizInput {
  userId: Int
  active: Boolean
  title: String
  description: String
  isEditableByUser: Boolean
  sections:[SectionInput]
}

input SectionInput {
  title: String
  description: String
  isActive: Boolean
  questions: [QuestionInput]

}

input QuestionInput {
  description: String
  choiceType: String
  choiceDependenceDescription: String
  isActive: Boolean
  choices: [ChoiceInput]
}

input ChoiceInput {
  description: String
}

extend type Subscription {
  # modelUpdated: UpdateModelPayload
  quizzesUpdated( filter: FilterQuizInput): UpdateQuizPayload
  # subscriptionName: TypeName
}

type UpdateQuizPayload {
  mutation: String!
  node: Quiz
}


