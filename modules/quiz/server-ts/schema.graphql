# Entity
type Quiz {
  id: Int!
  userId: Int
  active: Boolean
  title: String
  description: String
  createdAt: String
  updatedAt: String
  user: User
  isEditableByUser: Boolean
  sections:[Section]
  attempts: [Attempt]
}

type Section {
  id: Int
  title: String
  quizId: Int!
  description: String
  createdAt: String
  updatedAt: String
  isActive: Boolean
  questions: [Question]

}

type Question {
  id: Int!
  sectionId: Int!
  answers: [Answer]
  description: String!
  choiceType: String
  choiceDependenceDescription: String
  isActive: Boolean
  choices: [Choice]
  createdAt: String
  updatedAt: String
}

type Choice {
  id: Int!
  questionId: Int!
  count: Int
  description: String!
  createdAt: String
  updatedAt: String
}

type Attempt {
  id: Int
  userId: Int
  quizId: Int
  user:User
  quiz: Quiz
  answers: [Answer]
}

type Answer {
  id: Int!
  questionId: Int!
  attemptId: Int!
  choiceId: Int
  content: String
  createdAt: String
  updatedAt: String
}

extend type Query {
  #get quizzes
  quizzes(filter: FilterQuizInput): [Quiz]
  #get quiz by id
  quiz(id: Int!): Quiz
  #get quiz attempt of a user
  attempt(quizId: Int!, userId: Int!): Attempt
  #get attempts
  getAttempts(quizId: Int!): [Attempt]
  #get quiz with answer count
  getQuizCount(id: Int!): Quiz
  #get user wise attempts
  getUserWiseAttempts(id: Int!, groupId: Int): Quiz
}

input FilterQuizInput {
  searchText: String
  # model: String
  # status: String
}

extend type Mutation {
  # Create new quiz
  addQuiz(input: AddQuizInput!): Quiz
  # Edit a quiz
  editQuiz(input: Quiz!): Quiz
  # Delete quiz
  deleteQuiz(id: Int): Quiz
  # Add attempt
  addAttempt(input: AttemptInput!): Attempt
  # Duplicate quiz
  duplicateQuiz(userId: Int!, quizId: Int!): Quiz
}

type AttemptInput {
  userId: Int
  quizId: Int
  user:User
  quiz: Quiz
  answers: [AnswerInput]
}

type AnswerInput {
  questionId: Int!
  choiceId: Int
  content: String
  createdAt: String
  updatedAt: String
}

type AddQuizInput {
  userId: Int
  active: Boolean
  title: String
  description: String
  createdAt: String
  updatedAt: String
  isEditableByUser: Boolean
  sections:[SectionInput]
}

type SectionInput {
  title: String
  description: String
  createdAt: String
  updatedAt: String
  isActive: Boolean
  questions: [QuestionInput]

}

type QuestionInput {
  description: String
  choiceType: String
  choiceDependenceDescription: String
  isActive: Boolean
  choices: [ChoiceInput]
  createdAt: String
  updatedAt: String
}

type ChoiceInput {
  description: String
  createdAt: String
  updatedAt: String
}

extend type Subscription {
  # modelUpdated: UpdateModelPayload
  quizzesUpdated( filter: FilterQuizInput): UpdateQuizPayload
  # subscriptionName: TypeName
}

type UpdateQuizPayload {
  mutation: String!
  node: Quiz
}


