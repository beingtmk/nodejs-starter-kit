type Group {
  id: Int!
  title: String!
  avatar: String
  description: String!
  groupId: Int
  subGroups: [Group]
  members: [GroupMember]
  groupQuizzes: [GroupModalQuiz]
  groupType: String!
  createdAt: String!
  updatedAt: String!
}

type GroupMember {
  id: Int!
  email: String
  type: String!
  status: String!
  groupId: Int
  group: Group!
  member: User
  createdAt: String!
  updatedAt: String!
}

type GroupModalQuiz {
  id: Int!
  groupId: Int
  modelId: Int
  model: String
  quiz: Quiz
  createdAt: String!
  updatedAt: String!
}

extend type Query {
  groups(
    limit: Int
    after: Int
    groupId: Int
    filter: FilterGroupInput
  ): GroupList
  userGroups(userId: Int): [Group]
  group(id: Int!): Group
  allGroupMembers: [GroupMember]
  groupMember(id: Int!): GroupMember
  groupMembers(id: Int!): [GroupMember]
  groupQuizzes(groupId: Int!): [GroupModalQuiz]
}

type GroupEdges {
  node: Group
  cursor: Int
}

type GroupList {
  totalCount: Int
  edges: [GroupEdges]
  pageInfo: GroupPageInfo
}

type GroupPageInfo {
  endCursor: Int
  hasNextPage: Boolean
}

input FilterGroupInput {
  searchText: String
  model: String
  status: String
}

extend type Mutation {
  addGroupMemberInvite(input: AddGroupMemberInput!): Boolean
  addGroupMember(input: AddGroupMemberInput!): GroupMember
  addGroupMembers(input: AddGroupMembersInput!): Boolean
  editGroupMember(input: EditGroupMemberInput!): GroupMember
  changeGroupMemberType(input: ChangeGroupMemberTypeInput!): GroupMember
  deleteGroupMember(id: Int!): GroupMember
  addGroup(input: AddGroupInput!): Group
  updateGroup(input: UpdateGroupInput!): Group
  upsertGroup(input: UpsertGroupInput!): Group
  adminEditGroup(input: AdminEditGroupInput!): Group
  deleteGroup(id: Int!): Group
  addQuizToGroup(input: AddQuizToGroupInput!): Boolean
  deleteQuizFromGroup(quizGroupId: Int!): Boolean
}

input AddQuizToGroupInput {
  groupId: Int!
  modelId: Int!
}

input AdminEditGroupInput {
  id: Int!
  title: String!
  avatar: String
  description: String
  groupType: String!
  members: [MemberInput]
}


input ChangeGroupMemberTypeInput {
  id: Int!
  type: String!
}

input AddGroupInput {
  title: String!
  avatar: String
  description: String
  groupType: String
  groupId: Int
  members: [MemberInput]
}

input MemberInput {
  id: Int
  email: String!
  type: String!
  status: String!
}

input UpdateGroupInput {
  id: Int!
  title: String
  avatar: String
  groupId: Int
  description: String
  groupType: String
}

input UpsertGroupInput {
  id: Int!
  members: [MemberInput]
}

input AddGroupMembersInput {
  groupId: Int!
  members: [AddGroupMemberInput]!
}

input AddGroupMemberInput {
  email: String!
  type: String!
  status: String!
  groupId: Int!
}

input EditGroupMemberInput {
  id: Int!
  email: String
  type: String
  status: String
}

extend type Subscription {
  groupsUpdated(
    endCursor: Int!
    parentGroupId: Int
    filter: FilterGroupInput
  ): UpdateGroupPayload
  # groupMembersUpdated: UpdateGroupMembersPayload
  groupItemUpdated(id: Int): GroupItemPayload
}

type GroupItemPayload {
  mutation: String!
  node: Group!
  id: Int!
}

# type UpdateGroupMembersPayload {
#   mutation: String!
#   node: GroupMember!
# }

type UpdateGroupPayload {
  mutation: String!
  parentGroupId: Int
  node: Group!
}
