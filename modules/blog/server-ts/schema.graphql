# Entity
type Blog {
  id: Int!
  author: User!
  model: Model!
  title: String!
  image: String
  description: String
  content: String!
  status: String!
  tags: [BlogTag]
  createdAt: String!
  updatedAt: String!
}

type Model {
  id: Int!
  name: String!
  image: String!
  desc: String!
  createdAt: String!
  updatedAt: String!
}

extend type Query {
  models: [Model]
  model(id: Int!): Model
  blogs(limit: Int, after: Int, filter: FilterBlogInput): BlogList
  blog(id: Int!): Blog
  userBlogs(id: Int): [Blog]
}

type BlogEdges {
  node: Blog
  cursor: Int
}

type BlogList {
  totalCount: Int
  edges: [BlogEdges]
  pageInfo: BlogPageInfo
}

type BlogPageInfo {
  endCursor: Int
  hasNextPage: Boolean
}

input FilterBlogInput {
  searchText: String
  model: String
  status: String
}

extend type Mutation {
  addBlog(input: AddBlogInput!): Blog
  editBlog(input: EditBlogInput!): Blog
  deleteBlog(id: Int!): Blog
  addModel(input: AddModelInput!): Model
  updateModel(input: UpdateModelInput!): Model
  deleteModel(id: Int!): Model
}

input AddModelInput {
  name: String!
  image: String!
  desc: String!
}

input UpdateModelInput {
  id: Int!
  name: String!
  image: String!
  desc: String!
}

input AddBlogInput {
  title: String!
  image: String
  content: String!
  status: String
  description: String
  modelId: Int!
  authorId: Int
  tags: [TagInput]
}

input EditBlogInput {
  id: Int!
  title: String
  image: String
  content: String
  description: String
  status: String
  modelId: Int
  authorId: Int
  tags: [TagInput]
}

input TagInput {
  id: Int
  text: String!
}

extend type Subscription {
  modelUpdated: UpdateModelPayload
  blogsUpdated(endCursor: Int!, filter: FilterBlogInput): UpdateBlogsPayload
  # subscriptionName: TypeName
}

type UpdateBlogsPayload {
  mutation: String!
  node: Blog!
}

type UpdateModelPayload {
  mutation: String!
  node: Model!
}
