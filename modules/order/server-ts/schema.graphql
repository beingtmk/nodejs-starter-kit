type Order {
  id: Int!

  consumer: User

  trackingId: String

  orderState: OrderState
  orderDetails: [OrderDetail]

  createdAt: String
  updatedAt: String
}

type OrderState {
  id: Int
  state: String
}

type OrderDetail {
  id: Int!
  vendor: User
  modalName: String
  modalId: Int

  title: String
  imageUrl: String
  cost: Int

  orderOptions: OrderOption
  orderDelivery: OrderDelivery
}

type OrderOption {
  id: Int
  quantity: Int
}

type OrderDelivery {
  id: Int
  address: Address
  type: String
}

type OrderEdges {
  node: Order
  cursor: Int
}

type OrderPageInfo {
  endCursor: Int
  hasNextPage: Boolean
}

type Orders {
  totalCount: Int
  edges: [OrderEdges]
  pageInfo: OrderPageInfo
}

extend type Query {
  order(id: Int!): Order
  orders(
    limit: Int!
    after: Int!
    orderBy: OrderByListInput
    filter: FilterOrderInput
  ): Orders

  # userDeliveries(userId: Int): [Order]
}

input FilterOrderInput {
  searchText: String
  vendorId: Int
  consumerId: Int
  state: String
}

# Input for ordering orders
input OrderByInput {
  column: String
  # asc | desc
  order: String
}

extend type Mutation {
  addToCart(input: AddToCartInput!): Boolean

  # Create new order
  addOrder(input: AddOrderInput!): Order
  # Delete a order
  deleteOrder(id: Int!): Order
  # Edit a order
  editOrder(input: EditOrderInput!): Order
  # Patch a order
  patchOrder(input: PatchOrderInput!): Order

  changeDateInCart(input: ChangeDateInCartInput!): Boolean

  deleteOrderDetail(id: Int!): Boolean
}

input ChangeDateInCartInput {
  id: Int!
  orderDetailId: Int!
  date: String!
}

input AddToCartInput {
  consumerId: Int
  vendorId: Int
  orderDetail: OrderDetailInput!
}

input OrderDetailInput {
  id: Int
  date: String
  cost: Int
  thumbnail: String
  title: String
  quantity: Int
}

input AddOrderInput {
  consumerId: Int
  vendorId: Int
  state: String
  orderDetails: [OrderDetailInput]
}

# Input for patchOrder Mutation
input PatchOrderInput {
  id: Int!
  state: String
}

# Input for editOrder Mutation
input EditOrderInput {
  id: Int!
  state: String
  orderDetails: [OrderDetailInput]
}

extend type Subscription {
  # Subscription for when editing a order
  orderUpdated(id: Int!): UpdateOrderPayload
  # Subscription for order list
  ordersUpdated(endCursor: Int, filter: FilterListInput): UpdateOrderPayload
}

# Payload for ordersUpdated Subscription
type UpdateOrderPayload {
  mutation: String!
  id: Int
  node: Order
}
