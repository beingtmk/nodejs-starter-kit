# Entity
type Resource {
  id: Int!

  # Resource module
  userId: Int!
  title: String
  uploadedBy: String
  tags: String
  description: String
  resource: [ResourceFiles]
  createdAt: String!
  updatedAt: String!
}

type ResourceFiles {
  id: Int!
  resourceId: Int!
  resourceUrl: String!
  createdAt: String!
  updatedAt: String!
}

type ResourcesPageInfo {
  endCursor: Int
  hasNextPage: Boolean
}

type ResourceEdges {
  node: Resource
  cursor: Int
}
type Resources {
  totalCount: Int
  edges: [ResourceEdges]
  pageInfo: ResourcesPageInfo
}

extend type Query {
  resources(
    limit: Int
    after: Int
    orderBy: OrderByListInput
    filter: FilterListInput
  ): Resources
  resource(id: Int!): Resource
}

extend type Mutation {
  addResource(input: AddResourceInput!): Resource
  deleteResource(id: Int!): Resource
  editResource(input: EditResourceInput!): Resource
}

input FilterListInput {
  title: String
  uploadedBy: String
  tags: String
  searchText: String
}

# Input for ordering
input OrderByListInput {
  column: String
  # asc | desc
  order: String
}

input AddResourceInput {
  userId: Int
  title: String
  uploadedBy: String
  tags: String
  description: String
  resource: [ResourceInput]
}

input ResourceInput {
  id: Int
  resourceUrl: String!
}

input EditResourceInput {
  id: Int!

  # Resource module
  userId: Int
  title: String
  uploadedBy: String
  tags: String
  description: String
  resource: [ResourceInput]
}

extend type Subscription {
  resourceUpdated(id: Int!): UpdateResourcePayload
  resourcesUpdated(
    endCursor: Int
    filter: FilterListInput
  ): UpdateResourcePayload
}

type UpdateResourcePayload {
  mutation: String!
  id: Int
  node: Resource
}
