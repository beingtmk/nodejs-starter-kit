# Entity
type Listing {
  id: Int
  userId: Int!
  title: String!
  description: String
  isActive: Boolean
  listingImages: [ListingImages]
  listingCost: ListingCost
  createdAt: String!
  updatedAt: String!
}

type ListingImages {
  id: Int
  listingId: Int
  imageUrl: String
}

type ListingCost {
  id: Int
  listingId: Int
  cost: Int
}

type Listings {
  totalCount: Int
  edges: [ListingEdges]
  pageInfo: ListingPageInfo
}

type ListingEdges {
  node: Listing
  cursor: Int
}

type ListingPageInfo {
  endCursor: Int
  hasNextPage: Boolean
}

extend type Query {
  listings(
    limit: Int
    after: Int
    orderBy: OrderByListInput
    filter: FilterListInput
  ): Listings
  listing(id: Int!): Listing
  userListings(userId: Int): [Listing]

  #Bookmark
  myListingsBookmark(
    userId: Int
    limit: Int
    after: Int
  ): Listings
  listingBookmarkStatus(listingId: Int, userId: Int): Boolean
}

# Input for ordering listings
input OrderByListInput {
  column: String
  # asc | desc
  order: String
}

input FilterListInput {
  isActive: Boolean
  searchText: String
}

extend type Mutation {
  # Create new listing
  addListing(input: AddListingInput!): Listing
  # # Edit a listing
  editListing(input: EditListingInput!): Boolean
  # # Delete a listing
  deleteListing(id: Int!): Boolean

  # Activating a Listing
  toggleListingIsActive(id: Int!): Boolean

  # Bookmark
  addOrRemoveListingBookmark(listingId: Int, userId: Int): String
}

input AddListingInput {
  id: Int
  userId: Int
  title: String
  description: String
  isActive: Boolean
  listingImages: [ListingImagesInput]
  listingCost: ListingCostInput
}

# Input for addListing Mutation
input ListingImagesInput {
  id: Int
  imageUrl: String!
}
input ListingCostInput {
  id: Int
  cost: Int
}

# Input for editListing Mutation
input EditListingInput {
  id: Int!
  userId: Int
  title: String
  description: String
  isActive: Boolean
  listingImages: [ListingImagesInput]
  listingCost: ListingCostInput
}

extend type Subscription {
  # Subscription for listing list
  listingsUpdated(endCursor: Int, filter: FilterListInput): UpdateListingPayload

  # Subscription for when editing a listing
  listingUpdated(id: Int): UpdateListingPayload

  # Bookmark
  listingsBookmarkUpdated(endCursor: Int): UpdateListingPayload
}

# Payload for listingsUpdated Subscription
type UpdateListingPayload {
  mutation: String!
  id: Int
  node: Listing
}
