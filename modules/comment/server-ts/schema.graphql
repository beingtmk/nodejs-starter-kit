# Entity
type ContentComment {
  id: Int!
  content: String!
  user: User!
  createdAt: String!
  updatedAt: String!
}

type ReplyComment {
  id: Int!
  reference: ContentComment!
  comment: ContentComment!
  createdAt: String!
  updatedAt: String!
}

type BlogComment {
  id: Int!
  blog: Blog!
  comment: ContentComment!
  createdAt: String!
  updatedAt: String!
}

extend type Query {
  comments: [ContentComment]
  comment(id: Int!): ContentComment
  blogComments(blogId: Int!): [BlogComment]
  commentReplies(referenceId: Int!): [ReplyComment]
}

extend type Mutation {
  addContentComment(input: AddContentCommentInput!): ContentComment
  editContentComment(input: EditContentCommentInput!): ContentComment
  deleteContentComment(id: Int!, ref: String!): ContentComment
}

input AddContentCommentInput {
  blogId: Int
  referenceId: Int
  userId: Int
  content: String!
}

input EditContentCommentInput {
  id: Int!
  ref: String!
  userId: Int
  content: String!
}

extend type Subscription {
  replyCommentUpdated: UpdateReplyCommentPayload
  blogCommentUpdated: UpdateBlogCommentPayload
}

type UpdateReplyCommentPayload {
  mutation: String!
  node: ReplyComment!
}

type UpdateBlogCommentPayload {
  mutation: String!
  node: BlogComment!
}
